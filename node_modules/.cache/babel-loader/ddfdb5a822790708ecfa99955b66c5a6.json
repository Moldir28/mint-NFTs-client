{"ast":null,"code":"var _jsxFileName = \"/Users/moldyr/Desktop/epic-nfts-client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './styles/App.css';\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport MyEpicNft from ''; // Constants\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = '';\nconst TOTAL_MINT_COUNT = 50;\n\nconst App = () => {\n  _s();\n\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  const checkIfWalletIsConnected = async () => {\n    const {\n      ethereum\n    } = window;\n\n    if (!ethereum) {\n      alert(\"Make sure you connected your Matamask\");\n    } else {\n      console.log(\"We have an ethereum object\", ethereum);\n    }\n    /*\n       * Check if we're authorized to access the user's wallet\n    */\n\n\n    const accounts = await ethereum.request({\n      method: 'eth_accounts'\n    });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account\", account);\n      setCurrentAccount(account);\n    } else {\n      console.log(\"No authorized account\");\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Get Metamask account\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      setIsLoading(true);\n      console.log(\"Connected\", accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n\n    setIsLoading(false);\n  };\n\n  const askContractToMintNft = async () => {\n    const CONTRACT_ADDRESS = \"0x5d8Cb2db9f30fa80B7a06b7a50A5C940d5E8AD79\";\n\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner(); // creates connection to our contract\n\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, MyEpicNft.abi, signer);\n        console.log(\"Going to pop wallet to pay gas...\");\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n        console.log(\"Mining... please wait.\");\n        setIsLoading(true);\n        await nftTxn.wait();\n        alert(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n      } else {\n        console.log(\"Ethereum object doesnt exist\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n\n    setIsLoading(false);\n  }; // Render Methods\n\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: connectWallet,\n    className: \"cta-button connect-wallet-button\",\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header gradient-text\",\n          children: \"My NFT Collection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"Each unique. Each beautiful. Discover your NFT today.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), currentAccount === \"\" ? renderNotConnectedContainer() : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: askContractToMintNft,\n          className: \"cta-button connect-wallet-button\",\n          children: \"Mint NFT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 24\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\\"\\\"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 44\n        }, this), \";\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built on @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"wfV+qA9McYhIfz8UEoKHhAuqg3Y=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/moldyr/Desktop/epic-nfts-client/src/App.js"],"names":["React","useEffect","useState","ethers","MyEpicNft","TWITTER_HANDLE","TWITTER_LINK","OPENSEA_LINK","TOTAL_MINT_COUNT","App","currentAccount","setCurrentAccount","isLoading","setIsLoading","checkIfWalletIsConnected","ethereum","window","alert","console","log","accounts","request","method","length","account","connectWallet","error","askContractToMintNft","CONTRACT_ADDRESS","provider","providers","Web3Provider","signer","getSigner","connectedContract","Contract","abi","nftTxn","makeAnEpicNFT","wait","hash","renderNotConnectedContainer","twitterLogo"],"mappings":";;;AAAA,OAAO,kBAAP;;AAEA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,SAAP,MAAsB,EAAtB,C,CAGA;;;AACA,MAAMC,cAAc,GAAG,aAAvB;AACA,MAAMC,YAAY,GAAI,uBAAsBD,cAAe,EAA3D;AACA,MAAME,YAAY,GAAG,EAArB;AACA,MAAMC,gBAAgB,GAAG,EAAzB;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAClB,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCT,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,KAAD,CAA1C;;AAGA,QAAMY,wBAAwB,GAAG,YAAY;AAC3C,UAAM;AAACC,MAAAA;AAAD,QAAaC,MAAnB;;AACA,QAAG,CAACD,QAAJ,EAAc;AACZE,MAAAA,KAAK,CAAC,uCAAD,CAAL;AACD,KAFD,MAEO;AACLC,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CJ,QAA1C;AACD;AAEF;AACD;AACA;;;AACA,UAAMK,QAAQ,GAAI,MAAML,QAAQ,CAACM,OAAT,CAAiB;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAjB,CAAxB;;AAEA,QAAGF,QAAQ,CAACG,MAAT,KAAoB,CAAvB,EAA0B;AACxB,YAAMC,OAAO,GAAGJ,QAAQ,CAAC,CAAD,CAAxB;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CK,OAA3C;AACAb,MAAAA,iBAAiB,CAACa,OAAD,CAAjB;AACD,KAJD,MAIO;AACLN,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACD;AACA,GApBD;;AAsBA,QAAMM,aAAa,GAAG,YAAW;AAC/B,QAAI;AACF,YAAM;AAACV,QAAAA;AAAD,UAAaC,MAAnB;;AACA,UAAG,CAACD,QAAJ,EAAc;AACZE,QAAAA,KAAK,CAAC,sBAAD,CAAL;AACA;AACD;;AACD,YAAMG,QAAQ,GAAG,MAAML,QAAQ,CAACM,OAAT,CAAiB;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAjB,CAAvB;AACAT,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBC,QAAQ,CAAC,CAAD,CAAjC;AACD,KATD,CASE,OAAMM,KAAN,EAAa;AACbR,MAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AACD;;AACDb,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAdD;;AAiBA,QAAMc,oBAAoB,GAAG,YAAW;AACtC,UAAMC,gBAAgB,GAAG,4CAAzB;;AAEF,QAAI;AACF,YAAM;AAACb,QAAAA;AAAD,UAAaC,MAAnB;;AAEA,UAAGD,QAAH,EAAa;AACX,cAAMc,QAAQ,GAAG,IAAI1B,MAAM,CAAC2B,SAAP,CAAiBC,YAArB,CAAkChB,QAAlC,CAAjB;AACA,cAAMiB,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf,CAFW,CAGX;;AACA,cAAMC,iBAAiB,GAAG,IAAI/B,MAAM,CAACgC,QAAX,CAAoBP,gBAApB,EAAsCxB,SAAS,CAACgC,GAAhD,EAAqDJ,MAArD,CAA1B;AAEJd,QAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ;AACA,YAAIkB,MAAM,GAAG,MAAMH,iBAAiB,CAACI,aAAlB,EAAnB;AAEApB,QAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACAN,QAAAA,YAAY,CAAC,IAAD,CAAZ;AAEA,cAAMwB,MAAM,CAACE,IAAP,EAAN;AAEAtB,QAAAA,KAAK,CAAE,2DAA0DoB,MAAM,CAACG,IAAK,EAAxE,CAAL;AACC,OAfC,MAgBG;AACHtB,QAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACD;AACA,KAtBD,CAsBE,OAAOO,KAAP,EAAc;AACdR,MAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AACD;;AACDb,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACC,GA7BD,CA5CkB,CA6EhB;;;AACA,QAAM4B,2BAA2B,GAAG,mBAClC;AAAS,IAAA,OAAO,EAAEhB,aAAlB;AAAiC,IAAA,SAAS,EAAC,kCAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AAMAxB,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,wBAAwB;AACzB,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,gCACE;AAAG,UAAA,SAAS,EAAC,sBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAG,UAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,EAKGJ,cAAc,KAAK,EAAnB,GAAyB+B,2BAA2B,EAApD,gBACC;AAAQ,UAAA,OAAO,EAAEd,oBAAjB;AAAuC,UAAA,SAAS,EAAE,kCAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANJ,EAQGf,SAAS,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAH,gBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBARnC;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAWE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,gCACE;AAAK,UAAA,GAAG,EAAC,cAAT;AAAwB,UAAA,SAAS,EAAC,cAAlC;AAAiD,UAAA,GAAG,EAAE8B;AAAtD;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AACE,UAAA,SAAS,EAAC,aADZ;AAEE,UAAA,IAAI,EAAEpC,YAFR;AAGE,UAAA,MAAM,EAAC,QAHT;AAIE,UAAA,GAAG,EAAC,YAJN;AAAA,oBAKG,aAAYD,cAAe;AAL9B;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAXF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAyBD,CAjHD;;GAAMI,G;;KAAAA,G;AAmHN,eAAeA,GAAf","sourcesContent":["import './styles/App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport React, {useEffect, useState} from \"react\";\nimport { ethers } from \"ethers\";\nimport MyEpicNft from ''\n\n\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = '';\nconst TOTAL_MINT_COUNT = 50;\n\nconst App = () => {\nconst [currentAccount, setCurrentAccount] = useState(\"\");\nconst [isLoading, setIsLoading] = useState(false)\n\n\nconst checkIfWalletIsConnected = async () => {\n  const {ethereum} = window; \n  if(!ethereum) {\n    alert(\"Make sure you connected your Matamask\")\n  } else {\n    console.log(\"We have an ethereum object\", ethereum)\n  }\n\n /*\n    * Check if we're authorized to access the user's wallet\n */\nconst accounts =  await ethereum.request({ method: 'eth_accounts' });\n\nif(accounts.length !== 0) {\n  const account = accounts[0];\n  console.log(\"Found an authorized account\", account)\n  setCurrentAccount(account);\n} else {\n  console.log(\"No authorized account\");\n}\n};\n\nconst connectWallet = async() => {\n  try {\n    const {ethereum} = window;\n    if(!ethereum) {\n      alert(\"Get Metamask account\");\n      return;\n    }\n    const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n    setIsLoading(true)\n    console.log(\"Connected\", accounts[0]);\n  } catch(error) {\n    console.log(error);\n  }\n  setIsLoading(false);\n};\n\n\nconst askContractToMintNft = async() => {\n  const CONTRACT_ADDRESS = \"0x5d8Cb2db9f30fa80B7a06b7a50A5C940d5E8AD79\";\n\ntry {\n  const {ethereum} = window;\n\n  if(ethereum) {\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    // creates connection to our contract\n    const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, MyEpicNft.abi, signer);\n\nconsole.log(\"Going to pop wallet to pay gas...\");\nlet nftTxn = await connectedContract.makeAnEpicNFT();\n\nconsole.log(\"Mining... please wait.\")\nsetIsLoading(true);\n\nawait nftTxn.wait();\n\nalert(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n}\nelse {\n  console.log(\"Ethereum object doesnt exist\")\n} \n} catch (error) {\n  console.log(error);\n}\nsetIsLoading(false); \n}\n\n\n\n  // Render Methods\n  const renderNotConnectedContainer = () => (\n    <button  onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n      Connect to Wallet\n    </button>\n  );\n\n  useEffect(() => {\n    checkIfWalletIsConnected()\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">My NFT Collection</p>\n          <p className=\"sub-text\">\n            Each unique. Each beautiful. Discover your NFT today.\n          </p>\n          {currentAccount === \"\" ? (renderNotConnectedContainer()) : (\n            <button onClick={askContractToMintNft} className =\"cta-button connect-wallet-button\">Mint NFT</button>\n          )}\n          {isLoading ? <p>Loading...</p> : <p>\"\"</p>};\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}