{"ast":null,"code":"var _jsxFileName = \"/Users/moldyr/Desktop/epic-nfts-client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './styles/App.css';\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport MyEpicNft from './utils/MyEpicNFT.json';\nimport Loading from './Loading/Loading.js'; // Constants\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`; // const OPENSEA_LINK = '';\n// const TOTAL_MINT_COUNT = 15;\n\nconst CONTRACT_ADDRESS = \"0x5d8Cb2db9f30fa80B7a06b7a50A5C940d5E8AD79\";\n\nconst App = () => {\n  _s();\n\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  const checkIfWalletIsConnected = async () => {\n    const {\n      ethereum\n    } = window;\n\n    if (!ethereum) {\n      alert(\"Make sure you connected your Metamask\");\n    } else {\n      console.log(\"We have an ethereum object\", ethereum);\n    }\n    /*\n       * Check if we're authorized to access the user's wallet\n    */\n\n\n    const accounts = await ethereum.request({\n      method: 'eth_accounts'\n    });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account\", account);\n      setCurrentAccount(account);\n      setupEventListener();\n    } else {\n      console.log(\"No authorized account\");\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Get Metamask account\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      setIsLoading(true);\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n      setupEventListener();\n    } catch (error) {\n      console.log(error);\n    }\n\n    setIsLoading(false);\n  };\n\n  const setupEventListener = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, MyEpicNft.abi, signer);\n        let chainId = await ethereum.request({\n          method: 'eth_chainId'\n        });\n        console.log(\"Connected to chain \" + chainId);\n        console.log(\"Setup Event Listener\");\n      } else {\n        console.log(\"Ethereum object doesnt exist\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const askContractToMintNft = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner(); // creates connection to our contract\n\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, MyEpicNft.abi, signer);\n        console.log(\"Going to pop wallet to pay gas...\");\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n        console.log(\"Mining... please wait.\");\n        setIsLoading(true);\n        await nftTxn.wait();\n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n      } else {\n        console.log(\"Ethereum object doesnt exist\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n\n    setIsLoading(false);\n  }; // Render Methods\n\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: connectWallet,\n    className: \"cta-button connect-wallet-button\",\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header gradient-text\",\n          children: \"My NFT Collection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"Each unique. Each beautiful. Discover your NFT today.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this), currentAccount === \"\" ? renderNotConnectedContainer() : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: askContractToMintNft,\n          className: \"cta-button connect-wallet-button\",\n          children: \"Mint NFT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: \"20px\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"cta-button opensea-button\",\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"https://testnets.opensea.io/collection/squarenft-kc4js2ewjw\",\n              target: \"_blank\",\n              children: \"\\uD83C\\uDF0A View Collection on OpenSea \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 57\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: isLoading && /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built with @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"wfV+qA9McYhIfz8UEoKHhAuqg3Y=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/moldyr/Desktop/epic-nfts-client/src/App.js"],"names":["React","useEffect","useState","ethers","MyEpicNft","Loading","TWITTER_HANDLE","TWITTER_LINK","CONTRACT_ADDRESS","App","currentAccount","setCurrentAccount","isLoading","setIsLoading","checkIfWalletIsConnected","ethereum","window","alert","console","log","accounts","request","method","length","account","setupEventListener","connectWallet","error","provider","providers","Web3Provider","signer","getSigner","connectedContract","Contract","abi","chainId","askContractToMintNft","nftTxn","makeAnEpicNFT","wait","hash","renderNotConnectedContainer","marginTop","twitterLogo"],"mappings":";;;AAAA,OAAO,kBAAP;;AAEA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,OAAP,MAAoB,sBAApB,C,CAEA;;;AACA,MAAMC,cAAc,GAAG,aAAvB;AACA,MAAMC,YAAY,GAAI,uBAAsBD,cAAe,EAA3D,C,CACA;AACA;;AAEA,MAAME,gBAAgB,GAAG,4CAAzB;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAClB,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCT,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,KAAD,CAA1C;;AAIA,QAAMY,wBAAwB,GAAG,YAAY;AAC3C,UAAM;AAACC,MAAAA;AAAD,QAAaC,MAAnB;;AACA,QAAG,CAACD,QAAJ,EAAc;AACZE,MAAAA,KAAK,CAAC,uCAAD,CAAL;AACD,KAFD,MAEO;AACLC,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CJ,QAA1C;AACD;AAEF;AACD;AACA;;;AACA,UAAMK,QAAQ,GAAI,MAAML,QAAQ,CAACM,OAAT,CAAiB;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAjB,CAAxB;;AAEA,QAAGF,QAAQ,CAACG,MAAT,KAAoB,CAAvB,EAA0B;AACxB,YAAMC,OAAO,GAAGJ,QAAQ,CAAC,CAAD,CAAxB;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CK,OAA3C;AACAb,MAAAA,iBAAiB,CAACa,OAAD,CAAjB;AACAC,MAAAA,kBAAkB;AACnB,KALD,MAKO;AACLP,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACD;AACA,GArBD;;AAuBA,QAAMO,aAAa,GAAG,YAAW;AAC/B,QAAI;AACF,YAAM;AAACX,QAAAA;AAAD,UAAaC,MAAnB;;AACA,UAAG,CAACD,QAAJ,EAAc;AACZE,QAAAA,KAAK,CAAC,sBAAD,CAAL;AACA;AACD;;AACD,YAAMG,QAAQ,GAAG,MAAML,QAAQ,CAACM,OAAT,CAAiB;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAjB,CAAvB;AACAT,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBC,QAAQ,CAAC,CAAD,CAAjC;AACAT,MAAAA,iBAAiB,CAACS,QAAQ,CAAC,CAAD,CAAT,CAAjB;AAEAK,MAAAA,kBAAkB;AAGnB,KAdD,CAcE,OAAME,KAAN,EAAa;AACbT,MAAAA,OAAO,CAACC,GAAR,CAAYQ,KAAZ;AACD;;AACDd,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAnBD;;AAqBA,QAAMY,kBAAkB,GAAG,YAAW;AACpC,QAAI;AACF,YAAM;AAACV,QAAAA;AAAD,UAAaC,MAAnB;;AAED,UAAGD,QAAH,EAAa;AACR,cAAMa,QAAQ,GAAG,IAAIzB,MAAM,CAAC0B,SAAP,CAAiBC,YAArB,CAAkCf,QAAlC,CAAjB;AACA,cAAMgB,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACA,cAAMC,iBAAiB,GAAG,IAAI9B,MAAM,CAAC+B,QAAX,CAAoB1B,gBAApB,EAAsCJ,SAAS,CAAC+B,GAAhD,EAAqDJ,MAArD,CAA1B;AAGR,YAAIK,OAAO,GAAG,MAAMrB,QAAQ,CAACM,OAAT,CAAiB;AAAEC,UAAAA,MAAM,EAAE;AAAV,SAAjB,CAApB;AACAJ,QAAAA,OAAO,CAACC,GAAR,CAAY,wBAAwBiB,OAApC;AAGQlB,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACJ,OAXD,MAWO;AACLD,QAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACD;AACD,KAjBD,CAiBE,OAAMQ,KAAN,EAAa;AACbT,MAAAA,OAAO,CAACC,GAAR,CAAYQ,KAAZ;AACD;AACF,GArBD;;AAuBA,QAAMU,oBAAoB,GAAG,YAAW;AACxC,QAAI;AACF,YAAM;AAACtB,QAAAA;AAAD,UAAaC,MAAnB;;AAEA,UAAGD,QAAH,EAAa;AACX,cAAMa,QAAQ,GAAG,IAAIzB,MAAM,CAAC0B,SAAP,CAAiBC,YAArB,CAAkCf,QAAlC,CAAjB;AACA,cAAMgB,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf,CAFW,CAGX;;AACA,cAAMC,iBAAiB,GAAG,IAAI9B,MAAM,CAAC+B,QAAX,CAAoB1B,gBAApB,EAAsCJ,SAAS,CAAC+B,GAAhD,EAAqDJ,MAArD,CAA1B;AAEJb,QAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ;AACA,YAAImB,MAAM,GAAG,MAAML,iBAAiB,CAACM,aAAlB,EAAnB;AAEArB,QAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACAN,QAAAA,YAAY,CAAC,IAAD,CAAZ;AAEA,cAAMyB,MAAM,CAACE,IAAP,EAAN;AAEAtB,QAAAA,OAAO,CAACC,GAAR,CAAa,2DAA0DmB,MAAM,CAACG,IAAK,EAAnF;AACC,OAfC,MAgBG;AACHvB,QAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACD;AACA,KAtBD,CAsBE,OAAOQ,KAAP,EAAc;AACdT,MAAAA,OAAO,CAACC,GAAR,CAAYQ,KAAZ;AACD;;AACDd,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACC,GA3BD,CAzEkB,CAwGhB;;;AACA,QAAM6B,2BAA2B,GAAG,mBAClC;AAAS,IAAA,OAAO,EAAEhB,aAAlB;AAAiC,IAAA,SAAS,EAAC,kCAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AAMAzB,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,wBAAwB;AACzB,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,gCACE;AAAG,UAAA,SAAS,EAAC,sBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAG,UAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,EAKGJ,cAAc,KAAK,EAAnB,GAAyBgC,2BAA2B,EAApD,gBACC;AAAQ,UAAA,OAAO,EAAEL,oBAAjB;AAAuC,UAAA,SAAS,EAAE,kCAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANJ,eAQE;AAAK,UAAA,KAAK,EAAE;AAACM,YAAAA,SAAS,EAAE;AAAZ,WAAZ;AAAA,iCACA;AAAQ,YAAA,SAAS,EAAC,2BAAlB;AAAA,mCAA8C;AAAG,cAAA,IAAI,EAAC,6DAAR;AAAsE,cAAA,MAAM,EAAC,QAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA9C;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,gBARF,eAWE;AAAA,oBACC/B,SAAS,iBAAI,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AADd;AAAA;AAAA;AAAA;AAAA,gBAXF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAgBE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,gCACE;AAAK,UAAA,GAAG,EAAC,cAAT;AAAwB,UAAA,SAAS,EAAC,cAAlC;AAAiD,UAAA,GAAG,EAAEgC;AAAtD;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AACE,UAAA,SAAS,EAAC,aADZ;AAEE,UAAA,IAAI,EAAErC,YAFR;AAGE,UAAA,MAAM,EAAC,QAHT;AAIE,UAAA,GAAG,EAAC,YAJN;AAAA,oBAKG,eAAcD,cAAe;AALhC;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAhBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA8BD,CAjJD;;GAAMG,G;;KAAAA,G;AAmJN,eAAeA,GAAf","sourcesContent":["import './styles/App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport React, {useEffect, useState} from \"react\";\nimport { ethers } from \"ethers\";\nimport MyEpicNft from './utils/MyEpicNFT.json'\nimport Loading from './Loading/Loading.js'\n\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n// const OPENSEA_LINK = '';\n// const TOTAL_MINT_COUNT = 15;\n\nconst CONTRACT_ADDRESS = \"0x5d8Cb2db9f30fa80B7a06b7a50A5C940d5E8AD79\";\n\nconst App = () => {\nconst [currentAccount, setCurrentAccount] = useState(\"\");\nconst [isLoading, setIsLoading] = useState(false)\n\n\n\nconst checkIfWalletIsConnected = async () => {\n  const {ethereum} = window; \n  if(!ethereum) {\n    alert(\"Make sure you connected your Metamask\")\n  } else {\n    console.log(\"We have an ethereum object\", ethereum)\n  }\n\n /*\n    * Check if we're authorized to access the user's wallet\n */\nconst accounts =  await ethereum.request({ method: 'eth_accounts' });\n\nif(accounts.length !== 0) {\n  const account = accounts[0];\n  console.log(\"Found an authorized account\", account)\n  setCurrentAccount(account);\n  setupEventListener();\n} else {\n  console.log(\"No authorized account\");\n}\n};\n\nconst connectWallet = async() => {\n  try {\n    const {ethereum} = window;\n    if(!ethereum) {\n      alert(\"Get Metamask account\");\n      return;\n    }\n    const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n    setIsLoading(true)\n    console.log(\"Connected\", accounts[0]);\n    setCurrentAccount(accounts[0]);\n    \n    setupEventListener()\n\n\n  } catch(error) {\n    console.log(error);\n  }\n  setIsLoading(false);\n};\n\nconst setupEventListener = async() => {\n  try {\n    const {ethereum} = window; \n   \n   if(ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, MyEpicNft.abi, signer);\n\n\nlet chainId = await ethereum.request({ method: 'eth_chainId' });\nconsole.log(\"Connected to chain \" + chainId);\n\n\n        console.log(\"Setup Event Listener\")\n   } else {\n     console.log(\"Ethereum object doesnt exist\");\n   } \n  } catch(error) {\n    console.log(error);\n  }\n}\n\nconst askContractToMintNft = async() => {\ntry {\n  const {ethereum} = window;\n\n  if(ethereum) {\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    // creates connection to our contract\n    const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, MyEpicNft.abi, signer);\n\nconsole.log(\"Going to pop wallet to pay gas...\");\nlet nftTxn = await connectedContract.makeAnEpicNFT();\n\nconsole.log(\"Mining... please wait.\")\nsetIsLoading(true);\n\nawait nftTxn.wait();\n\nconsole.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n}\nelse {\n  console.log(\"Ethereum object doesnt exist\")\n} \n} catch (error) {\n  console.log(error);\n}\nsetIsLoading(false); \n}\n\n\n\n  // Render Methods\n  const renderNotConnectedContainer = () => (\n    <button  onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n      Connect to Wallet\n    </button>\n  );\n\n  useEffect(() => {\n    checkIfWalletIsConnected()\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">My NFT Collection</p>\n          <p className=\"sub-text\">\n            Each unique. Each beautiful. Discover your NFT today.\n          </p>\n          {currentAccount === \"\" ? (renderNotConnectedContainer()) : (\n            <button onClick={askContractToMintNft} className =\"cta-button connect-wallet-button\">Mint NFT</button>\n          )}\n          <div style={{marginTop: \"20px\"}}>\n          <button className=\"cta-button opensea-button\"><a href=\"https://testnets.opensea.io/collection/squarenft-kc4js2ewjw\" target=\"_blank\">🌊 View Collection on OpenSea </a></button>\n          </div>\n          <div>\n          {isLoading && <Loading />}\n          </div>\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built with @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}