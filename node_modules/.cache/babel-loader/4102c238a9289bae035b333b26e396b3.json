{"ast":null,"code":"import _regeneratorRuntime from\"/Users/moldyr/Desktop/My projects/GIT Projects/epic-nfts-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/moldyr/Desktop/My projects/GIT Projects/epic-nfts-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/moldyr/Desktop/My projects/GIT Projects/epic-nfts-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import'./styles/App.css';import twitterLogo from\"./assets/twitter-logo.svg\";import React,{useEffect,useState}from\"react\";import{ethers}from\"ethers\";import MyEpicNft from'./utils/MyEpicNFT.json';import Loading from'./Loading/Loading.js';// Constants\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var TWITTER_HANDLE='_buildspace';var TWITTER_LINK=\"https://twitter.com/\".concat(TWITTER_HANDLE);// const OPENSEA_LINK = '';\n// const TOTAL_MINT_COUNT = 15;\nvar CONTRACT_ADDRESS=\"0x5d8Cb2db9f30fa80B7a06b7a50A5C940d5E8AD79\";var App=function App(){var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),currentAccount=_useState2[0],setCurrentAccount=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isLoading=_useState4[0],setIsLoading=_useState4[1];var checkIfWalletIsConnected=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _window,ethereum,accounts,account;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_window=window,ethereum=_window.ethereum;if(!ethereum){alert(\"Make sure you connected your Metamask\");}else{console.log(\"We have an ethereum object\",ethereum);}/*\n    * Check if we're authorized to access the user's wallet\n */_context.next=4;return ethereum.request({method:'eth_accounts'});case 4:accounts=_context.sent;if(accounts.length!==0){account=accounts[0];console.log(\"Found an authorized account\",account);setCurrentAccount(account);setupEventListener();}else{console.log(\"No authorized account\");}case 6:case\"end\":return _context.stop();}}},_callee);}));return function checkIfWalletIsConnected(){return _ref.apply(this,arguments);};}();var connectWallet=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var _window2,ethereum,accounts;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_window2=window,ethereum=_window2.ethereum;if(ethereum){_context2.next=5;break;}alert(\"Get Metamask account\");return _context2.abrupt(\"return\");case 5:_context2.next=7;return ethereum.request({method:\"eth_requestAccounts\"});case 7:accounts=_context2.sent;setIsLoading(true);console.log(\"Connected\",accounts[0]);setCurrentAccount(accounts[0]);setupEventListener();_context2.next=17;break;case 14:_context2.prev=14;_context2.t0=_context2[\"catch\"](0);console.log(_context2.t0);case 17:setIsLoading(false);case 18:case\"end\":return _context2.stop();}}},_callee2,null,[[0,14]]);}));return function connectWallet(){return _ref2.apply(this,arguments);};}();var setupEventListener=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var _window3,ethereum,provider,signer,connectedContract,chainId,rinkebyChainId;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;_window3=window,ethereum=_window3.ethereum;if(!ethereum){_context3.next=16;break;}provider=new ethers.providers.Web3Provider(ethereum);signer=provider.getSigner();connectedContract=new ethers.Contract(CONTRACT_ADDRESS,MyEpicNft.abi,signer);_context3.next=8;return ethereum.request({method:'eth_chainId'});case 8:chainId=_context3.sent;console.log(\"Connected to chain \"+chainId);// String, hex code of the chainId of the Rinkebey test network\nrinkebyChainId=\"0x4\";if(chainId!==rinkebyChainId){alert(\"You are not connected to the Rinkeby Test Network!\");}connectedContract.on(\"NewEpicNFTMinted\",function(from,tokenId){console.log(from,tokenId.toNumber());alert(\"Hey there! We've minted your NFT and sent it to your wallet.It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/\".concat(CONTRACT_ADDRESS,\"/\").concat(tokenId.toNumber()));});console.log(\"Setup Event Listener\");_context3.next=17;break;case 16:console.log(\"Ethereum object doesnt exist\");case 17:_context3.next=22;break;case 19:_context3.prev=19;_context3.t0=_context3[\"catch\"](0);console.log(_context3.t0);case 22:case\"end\":return _context3.stop();}}},_callee3,null,[[0,19]]);}));return function setupEventListener(){return _ref3.apply(this,arguments);};}();var askContractToMintNft=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){var _window4,ethereum,provider,signer,connectedContract,nftTxn;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.prev=0;_window4=window,ethereum=_window4.ethereum;if(!ethereum){_context4.next=17;break;}provider=new ethers.providers.Web3Provider(ethereum);signer=provider.getSigner();// creates connection to our contract\nconnectedContract=new ethers.Contract(CONTRACT_ADDRESS,MyEpicNft.abi,signer);console.log(\"Going to pop wallet to pay gas...\");_context4.next=9;return connectedContract.makeAnEpicNFT();case 9:nftTxn=_context4.sent;console.log(\"Mining... please wait.\");setIsLoading(true);_context4.next=14;return nftTxn.wait();case 14:console.log(\"Mined, see transaction: https://rinkeby.etherscan.io/tx/\".concat(nftTxn.hash));_context4.next=18;break;case 17:console.log(\"Ethereum object doesnt exist\");case 18:_context4.next=23;break;case 20:_context4.prev=20;_context4.t0=_context4[\"catch\"](0);console.log(_context4.t0);case 23:setIsLoading(false);case 24:case\"end\":return _context4.stop();}}},_callee4,null,[[0,20]]);}));return function askContractToMintNft(){return _ref4.apply(this,arguments);};}();// Render Methods\nvar renderNotConnectedContainer=function renderNotConnectedContainer(){return/*#__PURE__*/_jsx(\"button\",{onClick:connectWallet,className:\"cta-button connect-wallet-button\",children:\"Connect to Wallet\"});};useEffect(function(){checkIfWalletIsConnected();},[]);return/*#__PURE__*/_jsx(\"div\",{className:\"App\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"header-container\",children:[/*#__PURE__*/_jsx(\"p\",{className:\"header gradient-text\",children:\"My NFT Collection\"}),/*#__PURE__*/_jsx(\"p\",{className:\"sub-text\",children:\"Each unique. Each beautiful. Discover your NFT today.\"}),currentAccount===\"\"?renderNotConnectedContainer():/*#__PURE__*/_jsx(\"button\",{onClick:askContractToMintNft,className:\"cta-button connect-wallet-button\",children:\"Mint NFT\"}),/*#__PURE__*/_jsx(\"div\",{style:{marginTop:\"20px\"},children:/*#__PURE__*/_jsx(\"button\",{className:\"cta-button opensea-button\",children:/*#__PURE__*/_jsx(\"a\",{href:\"https://testnets.opensea.io/collection/squarenft-kc4js2ewjw\",target:\"_blank\",children:\"\\uD83C\\uDF0A View Collection on OpenSea \"})})}),/*#__PURE__*/_jsx(\"div\",{children:isLoading&&/*#__PURE__*/_jsx(Loading,{})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"footer-container\",children:[/*#__PURE__*/_jsx(\"img\",{alt:\"Twitter Logo\",className:\"twitter-logo\",src:twitterLogo}),/*#__PURE__*/_jsx(\"a\",{className:\"footer-text\",href:TWITTER_LINK,target:\"_blank\",rel:\"noreferrer\",children:\"built with @\".concat(TWITTER_HANDLE)})]})]})});};export default App;","map":{"version":3,"sources":["/Users/moldyr/Desktop/My projects/GIT Projects/epic-nfts-client/src/App.js"],"names":["React","useEffect","useState","ethers","MyEpicNft","Loading","TWITTER_HANDLE","TWITTER_LINK","CONTRACT_ADDRESS","App","currentAccount","setCurrentAccount","isLoading","setIsLoading","checkIfWalletIsConnected","window","ethereum","alert","console","log","request","method","accounts","length","account","setupEventListener","connectWallet","provider","providers","Web3Provider","signer","getSigner","connectedContract","Contract","abi","chainId","rinkebyChainId","on","from","tokenId","toNumber","askContractToMintNft","makeAnEpicNFT","nftTxn","wait","hash","renderNotConnectedContainer","marginTop","twitterLogo"],"mappings":"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","sourcesContent":["import './styles/App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport React, {useEffect, useState} from \"react\";\nimport { ethers } from \"ethers\";\nimport MyEpicNft from './utils/MyEpicNFT.json'\nimport Loading from './Loading/Loading.js'\n\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n// const OPENSEA_LINK = '';\n// const TOTAL_MINT_COUNT = 15;\n\nconst CONTRACT_ADDRESS = \"0x5d8Cb2db9f30fa80B7a06b7a50A5C940d5E8AD79\";\n\nconst App = () => {\nconst [currentAccount, setCurrentAccount] = useState(\"\");\nconst [isLoading, setIsLoading] = useState(false)\n\n\n\nconst checkIfWalletIsConnected = async () => {\n  const {ethereum} = window; \n  if(!ethereum) {\n    alert(\"Make sure you connected your Metamask\")\n  } else {\n    console.log(\"We have an ethereum object\", ethereum)\n  }\n\n /*\n    * Check if we're authorized to access the user's wallet\n */\nconst accounts =  await ethereum.request({ method: 'eth_accounts' });\n\nif(accounts.length !== 0) {\n  const account = accounts[0];\n  console.log(\"Found an authorized account\", account)\n  setCurrentAccount(account);\n  setupEventListener();\n} else {\n  console.log(\"No authorized account\");\n}\n};\n\nconst connectWallet = async() => {\n  try {\n    const {ethereum} = window;\n    if(!ethereum) {\n      alert(\"Get Metamask account\");\n      return;\n    }\n    const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n    setIsLoading(true)\n    console.log(\"Connected\", accounts[0]);\n    setCurrentAccount(accounts[0]);\n    \n    setupEventListener()\n\n\n  } catch(error) {\n    console.log(error);\n  }\n  setIsLoading(false);\n};\n\nconst setupEventListener = async() => {\n  try {\n    const {ethereum} = window; \n   \n   if(ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, MyEpicNft.abi, signer);\n\n\nlet chainId = await ethereum.request({ method: 'eth_chainId' });\nconsole.log(\"Connected to chain \" + chainId);\n\n// String, hex code of the chainId of the Rinkebey test network\nconst rinkebyChainId = \"0x4\"; \nif (chainId !== rinkebyChainId) {\n\talert(\"You are not connected to the Rinkeby Test Network!\");\n}\n\n      connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId)=> {\n        console.log(from, tokenId.toNumber())\n        alert(`Hey there! We've minted your NFT and sent it to your wallet.It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`)\n      });\n\n\n    console.log(\"Setup Event Listener\")\n   } else {\n     console.log(\"Ethereum object doesnt exist\");\n   } \n  } catch(error) {\n    console.log(error);\n  }\n}\n\nconst askContractToMintNft = async() => {\ntry {\n  const {ethereum} = window;\n\n  if(ethereum) {\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    // creates connection to our contract\n    const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, MyEpicNft.abi, signer);\n\nconsole.log(\"Going to pop wallet to pay gas...\");\nlet nftTxn = await connectedContract.makeAnEpicNFT();\n\nconsole.log(\"Mining... please wait.\")\nsetIsLoading(true);\n\nawait nftTxn.wait();\n\nconsole.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n}\nelse {\n  console.log(\"Ethereum object doesnt exist\")\n} \n} catch (error) {\n  console.log(error);\n}\nsetIsLoading(false); \n}\n\n\n\n  // Render Methods\n  const renderNotConnectedContainer = () => (\n    <button  onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n      Connect to Wallet\n    </button>\n  );\n\n  useEffect(() => {\n    checkIfWalletIsConnected()\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">My NFT Collection</p>\n          <p className=\"sub-text\">\n            Each unique. Each beautiful. Discover your NFT today.\n          </p>\n          {currentAccount === \"\" ? (renderNotConnectedContainer()) : (\n            <button onClick={askContractToMintNft} className =\"cta-button connect-wallet-button\">Mint NFT</button>\n          )}\n          <div style={{marginTop: \"20px\"}}>\n          <button className=\"cta-button opensea-button\"><a href=\"https://testnets.opensea.io/collection/squarenft-kc4js2ewjw\" target=\"_blank\">🌊 View Collection on OpenSea </a></button>\n          </div>\n          <div>\n          {isLoading && <Loading />}\n          </div>\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built with @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}